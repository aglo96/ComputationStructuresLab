.include "nominal.jsim"
.include "stdcell.jsim"
.include "lab6basicblock.jsim"

.subckt FA a b ci s co
Xg1 a b x xor2
Xg2 x ci s xor2
Xg3 a b y1 nand2
Xg4 a ci y2 nand2
Xg5 b ci y3 nand2
Xg6 y1 y2 y3 co nand3 
.ends

.subckt pc clk reset ia[31:0] 
// pc + 4, one of the input is 0000 0000 0000 0100 = 4
Xpcplusfour1 ia[1:0] 0#2 0#2 sum[1:0] co[1:0] FA
Xpcplusfour2 ia[2] vdd co[1] sum[2] co[2] FA
xpcplusfour3 ia[31:3] 0#29 co[30:2] sum[31:3] co[31:3] FA
	
Xmux reset#32 sum[31:0] 0#32 d[31:0] mux2
Xdreg d[31:0] clk#32 ia[31:0] dreg
.ends

.subckt regfile clk werf ra2sel ra[4:0] rb[4:0] rc[4:0] wdata[31:0] radata[31:0] rbdata[31:0]

Xregfile 
+ vdd 0 0 ra[4:0] adata[31:0]      // A read port
+ vdd 0 0 ra2mux[4:0] bdata[31:0]  // B read port 
+ 0 clk werf rc[4:0] wdata[31:0]   // write port 
+ $memory width=32 nlocations=31

//ra2sel
Xra2sel ra2sel#5 rb[4:0] rc[4:0] ra2mux[4:0] mux2

//check if address = R31 or not
XcheckRA1 ra[0] ra[1] ra[2] ra[3] resulta1 and4 //resulta1 = 1 if RA=31. 0 if register is not 31
XcheckRA2 resulta1 ra[4] resulta2 and2
XcheckRB1 ra2mux[0] ra2mux[1] ra2mux[2] ra2mux[3] resultb1 and4
XcheckRB2 ra2mux[4] resultb1 resultb2 and2  

Xradata resulta2#32 adata[31:0] 0#32 radata[31:0] mux2 //force R31 data to be 0 for read port A
Xrbdata resultb2#32 bdata[31:0] 0#32 rbdata[31:0] mux2 //force R31 data to be 0 for read port B

.ends


.subckt ctl reset id[31:26] ra2sel bsel alufn[5:0] wdsel[1:0] werf moe wr

Xctl vdd 0 0 id[31:26] // one read port
+ pcsel[2:0] wasel asel ra2sel bsel alufn[5:0] wdsel[1:0] werf moe xwr
+ $memory width=18 nlocations=64 contents=(
+ 0b000000000000000000 // opcode=0b000000
+ 0b000000000000000000 // opcode=0b000001
+ 0b000000000000000000 // opcode=0b000010
+ 0b000000000000000000 // opcode=0b000011
+ 0b000000000000000000 // opcode=0b000100
+ 0b000000000000000000 // opcode=0b000101
+ 0b000000000000000000 // opcode=0b000110
+ 0b000000000000000000 // opcode=0b000111
+ 0b000000000000000000 // opcode=0b001000
+ 0b000000000000000000 // opcode=0b001001
+ 0b000000000000000000 // opcode=0b001010
+ 0b000000000000000000 // opcode=0b001011
+ 0b000000000000000000 // opcode=0b001100
+ 0b000000000000000000 // opcode=0b001101
+ 0b000000000000000000 // opcode=0b001110
+ 0b000000000000000000 // opcode=0b001111
+ 0b000000000000000000 // opcode=0b010000
+ 0b000000000000000000 // opcode=0b010001
+ 0b000000000000000000 // opcode=0b010010
+ 0b000000000000000000 // opcode=0b010011
+ 0b000000000000000000 // opcode=0b010100
+ 0b000000000000000000 // opcode=0b010101
+ 0b000000000000000000 // opcode=0b010110
+ 0b000000000000000000 // opcode=0b010111
+ 0b000000100000010110 // opcode=0b011000 LD
+ 0b000001100000000001 // opcode=0b011001 ST
+ 0b000000000000000000 // opcode=0b011010
+ 0b000000000000000000 // opcode=0b011011  JMP
+ 0b000000000000000000 // opcode=0b011100
+ 0b000000000000000000 // opcode=0b011101  BEQ
+ 0b000000000000000000 // opcode=0b011110  BNE
+ 0b000000000000000000 // opcode=0b011111  LDR
+ 0b000000000000001100 // opcode=0b100000  ADD
+ 0b000000000000101100 // opcode=0b100001  SUB
+ 0b000000000000000000 // opcode=0b100010
+ 0b000000000000000000 // opcode=0b100011
+ 0b000000011001101100 // opcode=0b100100  CMPEQ
+ 0b000000011010101100 // opcode=0b100101  CMPLT
+ 0b000000011011101100 // opcode=0b100110  CMPLE
+ 0b000000000000000000 // opcode=0b100111
+ 0b000000001100001100 // opcode=0b101000  AND
+ 0b000000001111001100 // opcode=0b101001  OR
+ 0b000000001011001100 // opcode=0b101010  XOR
+ 0b000000000000000000 // opcode=0b101011
+ 0b000000010000001100 // opcode=0b101100  SHL
+ 0b000000010000101100 // opcode=0b101101  SHR
+ 0b000000010001101100 // opcode=0b101110  SRA
+ 0b000000000000000000 // opcode=0b101111
+ 0b000000100000001100 // opcode=0b110000  ADDC
+ 0b000000100000101100 // opcode=0b110001  SUBC
+ 0b000000000000000000 // opcode=0b110010
+ 0b000000000000000000 // opcode=0b110011
+ 0b000000111001101100 // opcode=0b110100  CMPEQC
+ 0b000000111010101100 // opcode=0b110101  CMPLTC
+ 0b000000111011101100 // opcode=0b110110  CMPLEC
+ 0b000000000000000000 // opcode=0b110111
+ 0b000000101100001100 // opcode=0b111000  ANDC
+ 0b000000101111001100 // opcode=0b111001  ORC
+ 0b000000101011001100 // opcode=0b111010  XORC
+ 0b000000000000000000 // opcode=0b111011
+ 0b000000110000001100 // opcode=0b111100  SHLC
+ 0b000000110000101100 // opcode=0b111101  SHRC
+ 0b000000110001101100 // opcode=0b111110  SRAC
+ 0b000000000000000000 // opcode=0b111111
+ )

Xmux reset xwr 0 wr mux2 //force wr=0 when reset=1 

.ends


.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n
XOrgate B[31:0] ALUFN[0]#32 XB[31:0] xor2
XADD1 A[0] XB[0] ALUFN[0] S[0] C[0] FA
XADD2 A[30:1] XB[30:1] C[29:0] S[30:1] C[30:1] FA
XADD3 A[31] XB[31] C[30] S[31] C[31] FA
XZ1 S[7:0] S[15:8] S[23:16] S[31:24] out1[7:0] or4
XZ2 out1[1:0] out1[3:2] out1[5:4] out1[7:6] out2[1:0] or4
XZ3 out2[0] out2[1] z nor2 
XV1 A[31] XAnot inverter
XV2 XB[31] XBnot inverter
XV3 S[31] Snot inverter
XV4 A[31] XB[31] Snot r1 and3
XV5 XAnot XBnot S[31] r2 and3
XV6 r1 r2 v or2

.connect n S[31]
.ends

.subckt compare32 ALUFN[2:1] z v n cmp[31:0]
.connect 0 cmp[31:1]
X1 n v out1 xor2
X2 z out1 out2 or2
X3 ALUFN[2] ALUFN[1] 0 out1 z out2 cmp[0] mux4
.ends

.subckt boole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0]
X1 A[31:0] B[31:0] ALUFN[0]#32 ALUFN[1]#32 ALUFN[2]#32 ALUFN[3]#32 boole[31:0] mux4
.ends 

.subckt shift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0]
XSHL1 B[4]#32 A[31:0] A[15:0] 0#16 W[31:0] mux2
XSHL2 B[3]#32 W[31:0] W[23:0] 0#8 X[31:0] mux2
XSHL3 B[2]#32 X[31:0] X[27:0] 0#4 Y[31:0] mux2
XSHL4 B[1]#32 Y[31:0] Y[29:0] 0#2 Z[31:0] mux2
XSHL5 B[0]#32 Z[31:0] Z[30:0] 0 SHL[31:0] mux2

XSHR1 B[4]#32 A[31:0] 0#16 A[31:16] P[31:0] mux2
XSHR2 B[3]#32 P[31:0] 0#8 P[31:8] Q[31:0] mux2
XSHR3 B[2]#32 Q[31:0] 0#4 Q[31:4] R[31:0] mux2
XSHR4 B[1]#32 R[31:0] 0#2 R[31:2] S[31:0] mux2
XSHR5 B[0]#32 S[31:0] 0 S[31:1] SHR[31:0] mux2

XSRA1 B[4]#32 A[31:0] A[31]#16 A[31:16] G[31:0] mux2
XSRA2 B[3]#32 G[31:0] G[31]#8 G[31:8] H[31:0] mux2
XSRA3 B[2]#32 H[31:0] H[31]#4 H[31:4] J[31:0] mux2
XSRA4 B[1]#32 J[31:0] J[31]#2 J[31:2] K[31:0] mux2
XSRA5 B[0]#32 K[31:0] K[31] K[31:1] SRA[31:0] mux2

X1 ALUFN[1]#32 ALUFN[0]#32 SHL[31:0] 0#32 SHR[31:0] SRA[31:0] shift[31:0] mux4
.ends 

.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] z v n
XADDER ALUFN[0] A[31:0] B[31:0] S[31:0] z v n adder32
XCMP ALUFN[2:1] z v n cmp[31:0] compare32
XBOOLE ALUFN[3:0] A[31:0] B[31:0] boole[31:0] boole32
XSHIFT ALUFN[1:0] A[31:0] B[4:0] shift[31:0] shift32

X1 ALUFN[5]#32 ALUFN[4]#32 S[31:0] shift[31:0] boole[31:0] cmp[31:0] alu[31:0] mux4
.ends



.subckt beta clk reset ia[31:0] id[31:0] ma[31:0] moe mrd[31:0] wr mwd[31:0]

Xpc clk reset ia[31:0] pc
Xregfile clk werf ra2sel id[20:16] id[15:11] id[25:21] wdata[31:0] radata[31:0] rbdata[31:0] regfile
Xctl reset id[31:26] ra2sel bsel alufn[5:0] wdsel[1:0] werf moe wr ctl

Xmwd rbdata[31:0] mwd[31:0] buffer //conect rbdata to mwd
Xbsel bsel#32 rbdata[31:0] id[15]#16 id[15:0] outputbsel[31:0] mux2 //for bsel
Xalu alufn[5:0] radata[31:0] outputbsel[31:0] ma[31:0] z v n alu  //to get ma[31:0]
Xwdsel wdsel[0]#32 wdsel[1]#32 0#32 ma[31:0] mrd[31:0] 0#32 wdata[31:0] mux4 //for wdsel
.ends

